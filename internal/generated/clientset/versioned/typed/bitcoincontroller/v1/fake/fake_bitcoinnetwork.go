// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	bitcoincontrollerv1 "io.saagie/bitcoin-controller/internal/apis/bitcoincontroller/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeBitcoinNetworks implements BitcoinNetworkInterface
type FakeBitcoinNetworks struct {
	Fake *FakeBitcoincontrollerV1
	ns   string
}

var bitcoinnetworksResource = schema.GroupVersionResource{Group: "bitcoincontroller", Version: "v1", Resource: "bitcoinnetworks"}

var bitcoinnetworksKind = schema.GroupVersionKind{Group: "bitcoincontroller", Version: "v1", Kind: "BitcoinNetwork"}

// Get takes name of the bitcoinNetwork, and returns the corresponding bitcoinNetwork object, and an error if there is any.
func (c *FakeBitcoinNetworks) Get(ctx context.Context, name string, options v1.GetOptions) (result *bitcoincontrollerv1.BitcoinNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(bitcoinnetworksResource, c.ns, name), &bitcoincontrollerv1.BitcoinNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*bitcoincontrollerv1.BitcoinNetwork), err
}

// List takes label and field selectors, and returns the list of BitcoinNetworks that match those selectors.
func (c *FakeBitcoinNetworks) List(ctx context.Context, opts v1.ListOptions) (result *bitcoincontrollerv1.BitcoinNetworkList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(bitcoinnetworksResource, bitcoinnetworksKind, c.ns, opts), &bitcoincontrollerv1.BitcoinNetworkList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &bitcoincontrollerv1.BitcoinNetworkList{ListMeta: obj.(*bitcoincontrollerv1.BitcoinNetworkList).ListMeta}
	for _, item := range obj.(*bitcoincontrollerv1.BitcoinNetworkList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested bitcoinNetworks.
func (c *FakeBitcoinNetworks) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(bitcoinnetworksResource, c.ns, opts))

}

// Create takes the representation of a bitcoinNetwork and creates it.  Returns the server's representation of the bitcoinNetwork, and an error, if there is any.
func (c *FakeBitcoinNetworks) Create(ctx context.Context, bitcoinNetwork *bitcoincontrollerv1.BitcoinNetwork, opts v1.CreateOptions) (result *bitcoincontrollerv1.BitcoinNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(bitcoinnetworksResource, c.ns, bitcoinNetwork), &bitcoincontrollerv1.BitcoinNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*bitcoincontrollerv1.BitcoinNetwork), err
}

// Update takes the representation of a bitcoinNetwork and updates it. Returns the server's representation of the bitcoinNetwork, and an error, if there is any.
func (c *FakeBitcoinNetworks) Update(ctx context.Context, bitcoinNetwork *bitcoincontrollerv1.BitcoinNetwork, opts v1.UpdateOptions) (result *bitcoincontrollerv1.BitcoinNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(bitcoinnetworksResource, c.ns, bitcoinNetwork), &bitcoincontrollerv1.BitcoinNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*bitcoincontrollerv1.BitcoinNetwork), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeBitcoinNetworks) UpdateStatus(ctx context.Context, bitcoinNetwork *bitcoincontrollerv1.BitcoinNetwork, opts v1.UpdateOptions) (*bitcoincontrollerv1.BitcoinNetwork, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(bitcoinnetworksResource, "status", c.ns, bitcoinNetwork), &bitcoincontrollerv1.BitcoinNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*bitcoincontrollerv1.BitcoinNetwork), err
}

// Delete takes name of the bitcoinNetwork and deletes it. Returns an error if one occurs.
func (c *FakeBitcoinNetworks) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(bitcoinnetworksResource, c.ns, name), &bitcoincontrollerv1.BitcoinNetwork{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeBitcoinNetworks) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(bitcoinnetworksResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &bitcoincontrollerv1.BitcoinNetworkList{})
	return err
}

// Patch applies the patch and returns the patched bitcoinNetwork.
func (c *FakeBitcoinNetworks) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *bitcoincontrollerv1.BitcoinNetwork, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(bitcoinnetworksResource, c.ns, name, pt, data, subresources...), &bitcoincontrollerv1.BitcoinNetwork{})

	if obj == nil {
		return nil, err
	}
	return obj.(*bitcoincontrollerv1.BitcoinNetwork), err
}
