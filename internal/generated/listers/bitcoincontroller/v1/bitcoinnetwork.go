// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "io.saagie/bitcoin-controller/internal/apis/bitcoincontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BitcoinNetworkLister helps list BitcoinNetworks.
// All objects returned here must be treated as read-only.
type BitcoinNetworkLister interface {
	// List lists all BitcoinNetworks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.BitcoinNetwork, err error)
	// BitcoinNetworks returns an object that can list and get BitcoinNetworks.
	BitcoinNetworks(namespace string) BitcoinNetworkNamespaceLister
	BitcoinNetworkListerExpansion
}

// bitcoinNetworkLister implements the BitcoinNetworkLister interface.
type bitcoinNetworkLister struct {
	indexer cache.Indexer
}

// NewBitcoinNetworkLister returns a new BitcoinNetworkLister.
func NewBitcoinNetworkLister(indexer cache.Indexer) BitcoinNetworkLister {
	return &bitcoinNetworkLister{indexer: indexer}
}

// List lists all BitcoinNetworks in the indexer.
func (s *bitcoinNetworkLister) List(selector labels.Selector) (ret []*v1.BitcoinNetwork, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BitcoinNetwork))
	})
	return ret, err
}

// BitcoinNetworks returns an object that can list and get BitcoinNetworks.
func (s *bitcoinNetworkLister) BitcoinNetworks(namespace string) BitcoinNetworkNamespaceLister {
	return bitcoinNetworkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BitcoinNetworkNamespaceLister helps list and get BitcoinNetworks.
// All objects returned here must be treated as read-only.
type BitcoinNetworkNamespaceLister interface {
	// List lists all BitcoinNetworks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.BitcoinNetwork, err error)
	// Get retrieves the BitcoinNetwork from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.BitcoinNetwork, error)
	BitcoinNetworkNamespaceListerExpansion
}

// bitcoinNetworkNamespaceLister implements the BitcoinNetworkNamespaceLister
// interface.
type bitcoinNetworkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BitcoinNetworks in the indexer for a given namespace.
func (s bitcoinNetworkNamespaceLister) List(selector labels.Selector) (ret []*v1.BitcoinNetwork, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.BitcoinNetwork))
	})
	return ret, err
}

// Get retrieves the BitcoinNetwork from the indexer for a given namespace and name.
func (s bitcoinNetworkNamespaceLister) Get(name string) (*v1.BitcoinNetwork, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("bitcoinnetwork"), name)
	}
	return obj.(*v1.BitcoinNetwork), nil
}
